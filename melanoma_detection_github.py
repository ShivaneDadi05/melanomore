# -*- coding: utf-8 -*-
"""Melanoma Detection Github

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rkKtxtGjZnHSS6Vlun5aOAmczHONzfKc
"""

# install tensorflow

!pip install tensorflowjs

# import packages

import random
import numpy as np
import matplotlib.pyplot as plt
import os
import cv2

import tensorflowjs as tfjs
import tensorflow as tf
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D

# reads images from folder and displays test image

file_path = "/content/melanoma_data"
categories_t = ["test", "train"]
categories_c = ["benign", "malignant"]

path = os.path.join(file_path, categories_t[0], categories_c[0])
for img in os.listdir(path):
  my_img = os.path.join(path, img)
  img_array = cv2.imread(my_img, cv2.IMREAD_COLOR)
  plt.imshow(img_array)
  plt.show()
  break

# testing image preprocessing

IMG_SIZE = 50

new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
# plt.imshow(new_array, cmap='gray')
plt.imshow(new_array)
plt.show()

# creates training data

training_data = []

def create_training_data():
  # finds image path
  for category in categories_c:

    path = os.path.join(file_path, categories_t[1], category)
    class_num = categories_c.index(category)

    # resizes image to 50x50 pixel scale and appends to training data list
    for img in os.listdir(path):
      try:
        my_img = os.path.join(path, img)
        img_array = cv2.imread(my_img, cv2.IMREAD_COLOR)
        new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
        training_data.append([new_array, class_num])
      except:
        pass

create_training_data()

# important to shuffle training data for model to train data that is randomized to improve accuract]y
random.shuffle(training_data)

# assigns labels to each image

X = []
y = []

for features, label in training_data:
  X.append(features)
  y.append(label)

X = np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 3)
y = np.array(y)
X = X/255.0

# creates continent with 4 layers
model = Sequential()

model.add(Conv2D(32, (3, 3), input_shape=X.shape[1:]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())  # this converts our 3D feature maps to 1D feature vectors

model.add(Dense(64))

model.add(Dense(1))

model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'],)

tf.config.run_functions_eagerly(True)
model.fit(X, y, batch_size=20, epochs=15)

# creates directory to save model

!mkdir tfjs_files

# saves h5 version of model and saves a tfjs version of the model

model.save("melanoma_model.h5")
tfjs.converters.save_keras_model(model, "/content/tfjs_files")